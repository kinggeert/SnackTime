@using Microsoft.AspNetCore.Mvc.TagHelpers
@model SnackTime.ViewModels.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
}

<div class="grid-wrapper">
    <!-- Section for categories -->
    <div>
        <h5>
            Categorie
        </h5>
        @foreach (var item in Model.Categories)
        {
            <div>
                @if (Model.SelectedCategory.Identifier == item.Identifier)
                {
                    <a class="btn btn-primary bottom-spacing" asp-action="Index" asp-route-id="@item.Identifier">@item.Name</a>
                }
                else
                {
                    <a class="btn btn-outline-primary bottom-spacing" asp-action="Index" asp-route-id="@item.Identifier">@item.Name</a>
                }
            </div>
        }
    </div>
    <!-- Section for Products -->
    <div>
        <h5>
            Producten
        </h5>
        @foreach (var product in Model.SelectedCategory.ProductsInCategory)
        {
            <div>
                <!-- Button to trigger modal -->
                <button type="button" class="btn btn-primary btn-sm bottom-spacing" data-bs-toggle="modal" data-bs-target="#productModal-@product.Identifier">
                    @product.Name
                </button>

                <!-- Modal -->
                <div class="modal fade" id="productModal-@product.Identifier" tabindex="-1" role="dialog" aria-labelledby="productModalLabel-@product.Identifier" data-product-id="@product.Identifier" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <form method="post" asp-action="AddProductToBasket">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="productModalLabel-@product.Identifier">@product.Name</h5>
                                </div>
                                <div class="modal-body">
                                    <input type="hidden" id="productId" name="ProductToAdd.Product.Identifier" value="@product.Identifier"/>
                                    <input type="hidden" id="basketId" name="Basket.Identifier" value="@Model.Basket.Identifier"/>

                                    <h6>Select Addons:</h6>
                                    @foreach (var addon in product.AvailableAddons)
                                    {
                                        <div>
                                            <input type="checkbox"
                                                   name="SelectedAddons"
                                                   value="@addon.Identifier"
                                                   id="addon-@addon.Identifier"
                                                   data-addon-price="@addon.Price"
                                                   class="addon-checkbox"/>
                                            <label for="addon-@addon.Identifier">@addon.Name (€@addon.Price)</label>
                                        </div>
                                    }
                                    <label for="ProductCount">Aantal:</label>
                                    <input type="number"
                                           id="ProductCount"
                                           name="ProductToAdd.Count"
                                           class="form-control"
                                           value="1" min="1"/>
                                </div>
                                <div class="modal-footer">
                                    <h5>
                                        €
                                        <span id="productPrice-@product.Identifier"
                                              data-base-price="@product.Price.ToString("F2")">
                                            @product.Price.ToString("F2")
                                        </span>
                                    </h5>
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Sluiten</button>
                                    <button type="submit" class="btn btn-primary">Toevoegen</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <!-- Section for basket -->
    <div>
        @if (User.Identity.IsAuthenticated)
        {
            <div>
                <h5>
                    Winkelmand
                </h5>
            </div>
            <div class="btn-group" role="group" aria-label="Order Type Selector">
                <form method="post" asp-action="SubmitOrder">
                    <div>
                        <input type="hidden" id="SelectedOrderType" name="OrderType" value="@(Model.SelectedOrderType.ToString())" />

                        <button type="button" class="btn btn-outline-primary @((Model.SelectedOrderType == Order.OrderType.Takeout) ? "active" : "")"
                                onclick="setOrderType('Takeout')">
                            Takeout
                        </button>
                        <button type="button" class="btn btn-outline-primary @((Model.SelectedOrderType == Order.OrderType.InStore) ? "active" : "")"
                                onclick="setOrderType('InStore')">
                            In-Store
                        </button>
                    </div>
                    <div>
                        <label for="TableNumber">Tafelnummer</label>
                        <input type="number" id="TableNumber" name="TableNumber" class="form-control" value="@Model.TableNumber" />
                    </div>
                    <div>
                        <input type="hidden" id="basketId" name="Basket.Identifier" value="@Model.Basket.Identifier" />
                        @if (Model.Basket.Products != null)
                        {
                            @foreach (var item in Model.Basket.Products)
                            {
                                <div>
                                    <div>
                                        @item.Product.Name
                                    </div>
                                    <div>
                                        @item.Count

                                        @item.GetTotalPrice()
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <button type="submit" class="btn btn-primary top-spacing">Bestellen</button>
                </form>
            </div>
        }
        else
        {
            <div>
                Log aub in of registreer een account om een bestelling te plaatsen.
            </div>
            <div>
                <button type="button" onclick="location.href='@Url.Action("Login", "Account")'">Inloggen</button>
                <button type="button" onclick="location.href='@Url.Action("Register", "Account")'">Registreren</button>
            </div>
        }
    </div>
</div>


<script>
    function setOrderType(orderType) {
        document.getElementById('SelectedOrderType').value = orderType;

        // Optionally highlight the selected button
        const buttons = document.querySelectorAll('.btn-group .btn');
        buttons.forEach(button => button.classList.remove('active'));
        
        const activeButton = document.querySelector(`button[onclick="setOrderType('${orderType}')"]`);
        if (activeButton) {
            activeButton.classList.add('active');
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        const updatePrice = (productId) => {

            // Attempt to find the price element
            const priceElement = document.querySelector(`#productPrice-${productId}`);
            if (!priceElement) {
                console.error(`Price element not found for product ID: ${productId}`);
                return;
            }

            const basePrice = parseFloat(priceElement.getAttribute('data-base-price'));
            if (isNaN(basePrice)) {
                console.error(`Base price is invalid for product ID: ${productId}`);
                return;
            }

            // Find all checked addon checkboxes
            const addonCheckboxes = document.querySelectorAll(`#productModal-${productId} .addon-checkbox:checked`);
            console.log(`Checked add-ons for product ${productId}:`, addonCheckboxes);

            let addonsPrice = 0;
            addonCheckboxes.forEach((checkbox) => {
                const addonPrice = parseFloat(checkbox.getAttribute('data-addon-price'));
                if (!isNaN(addonPrice)) {
                    addonsPrice += addonPrice;
                } else {
                    console.error(`Addon price invalid for checkbox: ${checkbox.id}`);
                }
            });

            const productCountInput = document.getElementById("ProductCount");
            const productCount = parseInt(productCountInput.value, 10);
            if (isNaN(productCount) || productCount < 1) {
                console.error(`Invalid product count: ${productCount}`);
                return;
            }

            const totalPrice = (basePrice + addonsPrice) * productCount;
            priceElement.textContent = totalPrice.toFixed(2);

            console.log(`Updated total price for product ${productId}: €${totalPrice}`);
        };

        // Attach change listeners to all addon-checkboxes
        document.querySelectorAll(".addon-checkbox").forEach((checkbox) => {
            checkbox.addEventListener("change", function () {
                const productId = this.closest(".modal").getAttribute("data-product-id");
                updatePrice(productId);
            });
        });

        const productCountInput = document.getElementById("ProductCount");
        if (productCountInput) {
            productCountInput.addEventListener("input", function () {
                const modalElement = this.closest(".modal");
                const productId = modalElement ? modalElement.getAttribute("data-product-id") : null;
                if (productId) {
                    updatePrice(productId);
                }
            });
        }
    });




</script>
